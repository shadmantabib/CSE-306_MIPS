
Control Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000666  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025f  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
0xd04,0x406};

int main(void)
{
	// To use PC2,3,4,5 pins for general I/O operations, JTAG must be disabled.(Enable JTD twice)
	MCUCSR |= (1<<JTD);
  92:	84 b7       	in	r24, 0x34	; 52
  94:	80 68       	ori	r24, 0x80	; 128
  96:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1<<JTD);
  98:	84 b7       	in	r24, 0x34	; 52
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0xFF; //output
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	DDRB=0X00; //input
  a2:	17 ba       	out	0x17, r1	; 23
	DDRD=0X00; //input
  a4:	11 ba       	out	0x11, r1	; 17
	DDRC=0XFF; //output
  a6:	84 bb       	out	0x14, r24	; 20
	// mRrWrDj AL
	// bNbEm2RmW AH
	// aluOPaluSRC CL


	PORTA = 0b11111111; // jump to bneq
  a8:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0b00000000;
  aa:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b00000000;
  ac:	12 ba       	out	0x12, r1	; 18
	PORTC = 0b11111111; // alusrc and aluop
  ae:	85 bb       	out	0x15, r24	; 21



	while (1)
	{
		unsigned int operation = PINB & 0b00001111;
  b0:	86 b3       	in	r24, 0x16	; 22
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
		// taking input opcode and configuring it to lower 4 bits 

		int ctrlOUT1 = controlMem[operation]%256;
  b8:	f9 01       	movw	r30, r18
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e0 5a       	subi	r30, 0xA0	; 160
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
		// in ctrlOUT1 is 32 bit. so it has total 12 bits that we need from lower side
		
		PORTA = ctrlOUT1 & 0b11111111;
  c2:	40 81       	ld	r20, Z
  c4:	51 81       	ldd	r21, Z+1	; 0x01
  c6:	50 78       	andi	r21, 0x80	; 128
  c8:	55 23       	and	r21, r21
  ca:	2c f4       	brge	.+10     	; 0xd6 <main+0x44>
  cc:	41 50       	subi	r20, 0x01	; 1
  ce:	51 09       	sbc	r21, r1
  d0:	5f 6f       	ori	r21, 0xFF	; 255
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	4b bb       	out	0x1b, r20	; 27
		// getting lower 8 bits (jump(LSB) to bneq(MSB))

		ctrlOUT1 = controlMem[operation]/256;
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	f9 01       	movw	r30, r18
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
		//discard the lower 8 bits so we getting ALUsrc(LSB) and ALUOP (reversed)
		
		PORTC = (ctrlOUT1 & 0b00001111)|( (operation<<4) & 0b11110000);
  e2:	20 81       	ld	r18, Z
  e4:	31 81       	ldd	r19, Z+1	; 0x01
  e6:	33 23       	and	r19, r19
  e8:	14 f4       	brge	.+4      	; 0xee <main+0x5c>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	93 2f       	mov	r25, r19
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	82 95       	swap	r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	89 2b       	or	r24, r25
  f8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	83 ec       	ldi	r24, 0xC3	; 195
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x72>
 104:	00 00       	nop
 106:	d4 cf       	rjmp	.-88     	; 0xb0 <main+0x1e>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
