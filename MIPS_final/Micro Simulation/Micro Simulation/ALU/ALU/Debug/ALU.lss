
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
unsigned char memArr[32];

int main(void)
{
// To use PC2,3,4,5 pins for general I/O operations, JTAG must be disabled.(Enable JTD twice)
	MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0XFF; //output and zero flag
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00; //input src1 and src2/destination
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC=0x00; //input from control (ALUsrc(LSB),beq_flag,bneq_flag(3rd bit))
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD=0x00; //input opcode(lower 4 bits) and destination/shift (higher 4 bits)
  90:	11 ba       	out	0x11, r1	; 17
	// opc BH
	// out CL
	// zero A0


	PORTA = 0b00000001;
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	9b bb       	out	0x1b, r25	; 27
	PORTB = 0b11111111;
  96:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00001111; 
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	82 bb       	out	0x12, r24	; 18
	PORTC = 0b00000000;
  9c:	15 ba       	out	0x15, r1	; 21

	int reg1; //input A
	int reg2; //input B
	int operation; //opcode 
	int dataOutputReg = 0x00;
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	70 e0       	ldi	r23, 0x00	; 0
		{
			dataOutputReg = reg1 >> reg2;
		}
		else if (operation == j)
		{
			dataOutputReg = 0;
  a2:	a1 2c       	mov	r10, r1
  a4:	e1 2c       	mov	r14, r1
			dataOutputReg = reg1 | reg2;
		}
		else if (operation == nor)
		{
			dataOutputReg = reg1 | reg2;
			dataOutputReg = (dataOutputReg ^ 15);
  a6:	0f 2e       	mov	r0, r31
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	ff 2e       	mov	r15, r31
  ac:	f0 2d       	mov	r31, r0
		}
		
		zeroFlag = (zeroFlag&beqf)|((!zeroFlag)&bneqf); // if 1 -> jump
		
		/*PORTC = 0x00;*/
		PORTA = dataOutputReg | (zeroFlag<<4);  // lower 4 bits are output and 5th bit is zero flag which determines if we jump
  ae:	d1 e0       	ldi	r29, 0x01	; 1
  b0:	c0 e0       	ldi	r28, 0x00	; 0
	int beqf; //flag
	int bneqf; // flag from control unit

	while (1)
	{
		operation = PIND%16; //lower 4 bits in
  b2:	e0 b3       	in	r30, 0x10	; 16
  b4:	ef 70       	andi	r30, 0x0F	; 15
  b6:	ae 2f       	mov	r26, r30
  b8:	b0 e0       	ldi	r27, 0x00	; 0
		// for any immediate operations,shift type , any operation that has ALUsrc = 1 we use input from portD (higher bits)
		
		reg1 = PINB%16; //src1 or whom we shift
  ba:	f6 b3       	in	r31, 0x16	; 22
  bc:	1f 2f       	mov	r17, r31
  be:	1f 70       	andi	r17, 0x0F	; 15
  c0:	81 2f       	mov	r24, r17
  c2:	90 e0       	ldi	r25, 0x00	; 0
		reg2 =  (PINB >> 4); //src2/shift amount
  c4:	f6 b3       	in	r31, 0x16	; 22
  c6:	f2 95       	swap	r31
  c8:	ff 70       	andi	r31, 0x0F	; 15
  ca:	cf 2e       	mov	r12, r31
  cc:	d1 2c       	mov	r13, r1
		
		int c = PINC;  //pinc will take input ALUsrc(LSB),beq_flag,bneq_flag(3rd bit)
  ce:	b3 b2       	in	r11, 0x13	; 19
		beqf = (c & 0b0001);
  d0:	2b 2d       	mov	r18, r11
  d2:	21 70       	andi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
		bneqf = (c & 0b0010)>>1;
  d6:	b1 fa       	bst	r11, 1
  d8:	44 27       	eor	r20, r20
  da:	40 f9       	bld	r20, 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
		

		if (operation == add || operation ==addi || operation == lw || operation == sw)
  de:	a4 30       	cpi	r26, 0x04	; 4
  e0:	b1 05       	cpc	r27, r1
  e2:	39 f0       	breq	.+14     	; 0xf2 <main+0x76>
  e4:	a7 30       	cpi	r26, 0x07	; 7
  e6:	b1 05       	cpc	r27, r1
  e8:	21 f0       	breq	.+8      	; 0xf2 <main+0x76>
  ea:	07 ef       	ldi	r16, 0xF7	; 247
  ec:	0e 0f       	add	r16, r30
  ee:	02 30       	cpi	r16, 0x02	; 2
  f0:	78 f4       	brcc	.+30     	; 0x110 <main+0x94>
		{
			dataOutputReg = (reg1 + reg2)%16;
  f2:	bc 01       	movw	r22, r24
  f4:	6c 0d       	add	r22, r12
  f6:	7d 1d       	adc	r23, r13
  f8:	6f 70       	andi	r22, 0x0F	; 15
  fa:	70 78       	andi	r23, 0x80	; 128
  fc:	77 23       	and	r23, r23
  fe:	0c f0       	brlt	.+2      	; 0x102 <main+0x86>
 100:	5e c0       	rjmp	.+188    	; 0x1be <main+0x142>
 102:	61 50       	subi	r22, 0x01	; 1
 104:	71 09       	sbc	r23, r1
 106:	60 6f       	ori	r22, 0xF0	; 240
 108:	7f 6f       	ori	r23, 0xFF	; 255
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	57 c0       	rjmp	.+174    	; 0x1be <main+0x142>
		}
		else if (operation == sub || operation == subi || operation == beq || operation == bneq)
 110:	ad 30       	cpi	r26, 0x0D	; 13
 112:	b1 05       	cpc	r27, r1
 114:	31 f0       	breq	.+12     	; 0x122 <main+0xa6>
 116:	a8 30       	cpi	r26, 0x08	; 8
 118:	b1 05       	cpc	r27, r1
 11a:	19 f0       	breq	.+6      	; 0x122 <main+0xa6>
 11c:	e1 50       	subi	r30, 0x01	; 1
 11e:	e2 30       	cpi	r30, 0x02	; 2
 120:	88 f4       	brcc	.+34     	; 0x144 <main+0xc8>
		{
			dataOutputReg = (reg1 - reg2 +16 )%16;
 122:	bc 01       	movw	r22, r24
 124:	6c 19       	sub	r22, r12
 126:	7d 09       	sbc	r23, r13
 128:	60 5f       	subi	r22, 0xF0	; 240
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
 12c:	6f 70       	andi	r22, 0x0F	; 15
 12e:	70 78       	andi	r23, 0x80	; 128
 130:	77 23       	and	r23, r23
 132:	0c f0       	brlt	.+2      	; 0x136 <main+0xba>
 134:	44 c0       	rjmp	.+136    	; 0x1be <main+0x142>
 136:	61 50       	subi	r22, 0x01	; 1
 138:	71 09       	sbc	r23, r1
 13a:	60 6f       	ori	r22, 0xF0	; 240
 13c:	7f 6f       	ori	r23, 0xFF	; 255
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	3d c0       	rjmp	.+122    	; 0x1be <main+0x142>
			
		}
		else if (operation == and || operation == andi)
 144:	a6 30       	cpi	r26, 0x06	; 6
 146:	b1 05       	cpc	r27, r1
 148:	19 f0       	breq	.+6      	; 0x150 <main+0xd4>
 14a:	ab 30       	cpi	r26, 0x0B	; 11
 14c:	b1 05       	cpc	r27, r1
 14e:	21 f4       	brne	.+8      	; 0x158 <main+0xdc>
		{
			dataOutputReg = reg1 & reg2;
 150:	f1 23       	and	r31, r17
 152:	6f 2f       	mov	r22, r31
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	33 c0       	rjmp	.+102    	; 0x1be <main+0x142>
		}
		else if (operation == or || operation == ori)
 158:	af 30       	cpi	r26, 0x0F	; 15
 15a:	b1 05       	cpc	r27, r1
 15c:	19 f0       	breq	.+6      	; 0x164 <main+0xe8>
 15e:	a3 30       	cpi	r26, 0x03	; 3
 160:	b1 05       	cpc	r27, r1
 162:	21 f4       	brne	.+8      	; 0x16c <main+0xf0>
		{
			dataOutputReg = reg1 | reg2;
 164:	f1 2b       	or	r31, r17
 166:	6f 2f       	mov	r22, r31
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	29 c0       	rjmp	.+82     	; 0x1be <main+0x142>
		}
		else if (operation == nor)
 16c:	a5 30       	cpi	r26, 0x05	; 5
 16e:	b1 05       	cpc	r27, r1
 170:	29 f4       	brne	.+10     	; 0x17c <main+0x100>
		{
			dataOutputReg = reg1 | reg2;
			dataOutputReg = (dataOutputReg ^ 15);
 172:	f1 2b       	or	r31, r17
 174:	ff 25       	eor	r31, r15
 176:	6f 2f       	mov	r22, r31
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	21 c0       	rjmp	.+66     	; 0x1be <main+0x142>
		}
		else if (operation == sll)
 17c:	10 97       	sbiw	r26, 0x00	; 0
 17e:	89 f4       	brne	.+34     	; 0x1a2 <main+0x126>
		{
			dataOutputReg = reg1 << reg2;
 180:	bc 01       	movw	r22, r24
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x10c>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	fa 95       	dec	r31
 18a:	e2 f7       	brpl	.-8      	; 0x184 <main+0x108>
			dataOutputReg%=16;
 18c:	6f 70       	andi	r22, 0x0F	; 15
 18e:	70 78       	andi	r23, 0x80	; 128
 190:	77 23       	and	r23, r23
 192:	ac f4       	brge	.+42     	; 0x1be <main+0x142>
 194:	61 50       	subi	r22, 0x01	; 1
 196:	71 09       	sbc	r23, r1
 198:	60 6f       	ori	r22, 0xF0	; 240
 19a:	7f 6f       	ori	r23, 0xFF	; 255
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	0e c0       	rjmp	.+28     	; 0x1be <main+0x142>
		}
		else if (operation == srl)
 1a2:	ae 30       	cpi	r26, 0x0E	; 14
 1a4:	b1 05       	cpc	r27, r1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <main+0x13a>
		{
			dataOutputReg = reg1 >> reg2;
 1a8:	bc 01       	movw	r22, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x134>
 1ac:	75 95       	asr	r23
 1ae:	67 95       	ror	r22
 1b0:	fa 95       	dec	r31
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <main+0x130>
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <main+0x142>
		}
		else if (operation == j)
 1b6:	1c 97       	sbiw	r26, 0x0c	; 12
 1b8:	11 f4       	brne	.+4      	; 0x1be <main+0x142>
		{
			dataOutputReg = 0;
 1ba:	6a 2d       	mov	r22, r10
 1bc:	7e 2d       	mov	r23, r14
		}

		if (dataOutputReg%16 == 0)
 1be:	db 01       	movw	r26, r22
 1c0:	af 70       	andi	r26, 0x0F	; 15
 1c2:	bb 27       	eor	r27, r27
		}
		
		zeroFlag = (zeroFlag&beqf)|((!zeroFlag)&bneqf); // if 1 -> jump
		
		/*PORTC = 0x00;*/
		PORTA = dataOutputReg | (zeroFlag<<4);  // lower 4 bits are output and 5th bit is zero flag which determines if we jump
 1c4:	8d 2f       	mov	r24, r29
 1c6:	9c 2f       	mov	r25, r28
 1c8:	10 97       	sbiw	r26, 0x00	; 0
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <main+0x154>
 1cc:	8a 2d       	mov	r24, r10
 1ce:	9e 2d       	mov	r25, r14
 1d0:	fc 01       	movw	r30, r24
 1d2:	e2 23       	and	r30, r18
 1d4:	f3 23       	and	r31, r19
 1d6:	8d 2f       	mov	r24, r29
 1d8:	9c 2f       	mov	r25, r28
 1da:	ab 2b       	or	r26, r27
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <main+0x166>
 1de:	8a 2d       	mov	r24, r10
 1e0:	9e 2d       	mov	r25, r14
 1e2:	84 23       	and	r24, r20
 1e4:	95 23       	and	r25, r21
 1e6:	8e 2b       	or	r24, r30
 1e8:	9f 2b       	or	r25, r31
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	86 2b       	or	r24, r22
 1f8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	83 ec       	ldi	r24, 0xC3	; 195
 1fc:	99 e0       	ldi	r25, 0x09	; 9
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x182>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x188>
 204:	00 00       	nop
 206:	55 cf       	rjmp	.-342    	; 0xb2 <main+0x36>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
