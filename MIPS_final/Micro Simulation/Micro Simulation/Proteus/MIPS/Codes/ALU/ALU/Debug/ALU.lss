
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006db  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016e  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

 unsigned char memArr[32];

 int main(void)
 {
	 MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	 MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	 
	 
	 DDRA=0XFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	 DDRB=0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	 DDRC=0x00;
  8e:	14 ba       	out	0x14, r1	; 20
	 DDRD=0x00;
  90:	11 ba       	out	0x11, r1	; 17
	 // opc BH
	 // out CL
	 // zero A0


	 PORTA = 0b00000001;
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	9b bb       	out	0x1b, r25	; 27
	 PORTB = 0b11111111;
  96:	88 bb       	out	0x18, r24	; 24
	 PORTD = 0b00001111;
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	82 bb       	out	0x12, r24	; 18
	 PORTC = 0b00001111;
  9c:	85 bb       	out	0x15, r24	; 21

	 int reg1;
	 int reg2;
	 int operation;
	 int dataOutputReg = 0x00;
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f0 e0       	ldi	r31, 0x00	; 0
		 {
			 dataOutputReg = reg1 >> reg2;
		 }
		 else if (operation == j)
		 {
			 dataOutputReg = 0;
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	c0 e0       	ldi	r28, 0x00	; 0
			 dataOutputReg = reg1 | reg2;
		 }
		 else if (operation == nor)
		 {
			 dataOutputReg = reg1 | reg2;
			 dataOutputReg = (dataOutputReg ^ 15);
  a6:	0f 2e       	mov	r0, r31
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	af 2e       	mov	r10, r31
  ac:	f0 2d       	mov	r31, r0
		 }
		 
		 bsel = (zeroFlag&beqf)|((!zeroFlag)&bneqf);
		 
		 /*PORTC = 0x00;*/
		 unsigned char f = dataOutputReg | (bsel<<4);
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
	 int bneqf;
	 int bsel;

	 while (1)
	 {
		 operation = PIND%16;
  b2:	00 b3       	in	r16, 0x10	; 16
  b4:	80 2f       	mov	r24, r16
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	e8 2e       	mov	r14, r24
  ba:	f1 2c       	mov	r15, r1
		 
		 reg1 = PINB%16;
  bc:	96 b3       	in	r25, 0x16	; 22
  be:	89 2f       	mov	r24, r25
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	c8 2e       	mov	r12, r24
  c4:	d1 2c       	mov	r13, r1
		 reg2 =  (PINB >> 4);
  c6:	96 b3       	in	r25, 0x16	; 22
  c8:	92 95       	swap	r25
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	29 2f       	mov	r18, r25
  ce:	30 e0       	ldi	r19, 0x00	; 0
		 
		 int c = PIND;
  d0:	b0 b2       	in	r11, 0x10	; 16
		 beqf = (c & 0b00010000)>>4;
  d2:	b4 fa       	bst	r11, 4
  d4:	44 27       	eor	r20, r20
  d6:	40 f9       	bld	r20, 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
		 bneqf = (c & 0b00100000)>>5;
  da:	b5 fa       	bst	r11, 5
  dc:	66 27       	eor	r22, r22
  de:	60 f9       	bld	r22, 0
  e0:	70 e0       	ldi	r23, 0x00	; 0

		 if (operation == add || operation ==addi || operation == lw || operation == sw)
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	e1 16       	cp	r14, r17
  e6:	f1 04       	cpc	r15, r1
  e8:	39 f0       	breq	.+14     	; 0xf8 <main+0x7c>
  ea:	1b e0       	ldi	r17, 0x0B	; 11
  ec:	e1 16       	cp	r14, r17
  ee:	f1 04       	cpc	r15, r1
  f0:	19 f0       	breq	.+6      	; 0xf8 <main+0x7c>
  f2:	0d 70       	andi	r16, 0x0D	; 13
  f4:	04 30       	cpi	r16, 0x04	; 4
  f6:	69 f4       	brne	.+26     	; 0x112 <main+0x96>
		 {
			 dataOutputReg = (reg1 + reg2)%16;
  f8:	c6 01       	movw	r24, r12
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	90 78       	andi	r25, 0x80	; 128
 102:	99 23       	and	r25, r25
 104:	24 f4       	brge	.+8      	; 0x10e <main+0x92>
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	80 6f       	ori	r24, 0xF0	; 240
 10a:	9f 6f       	ori	r25, 0xFF	; 255
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	fc 01       	movw	r30, r24
 110:	65 c0       	rjmp	.+202    	; 0x1dc <main+0x160>
		 }
		 else if (operation == sub || operation == subi || operation == beq || operation == bneq)
 112:	1e e0       	ldi	r17, 0x0E	; 14
 114:	e1 16       	cp	r14, r17
 116:	f1 04       	cpc	r15, r1
 118:	61 f0       	breq	.+24     	; 0x132 <main+0xb6>
 11a:	19 e0       	ldi	r17, 0x09	; 9
 11c:	e1 16       	cp	r14, r17
 11e:	f1 04       	cpc	r15, r1
 120:	41 f0       	breq	.+16     	; 0x132 <main+0xb6>
 122:	15 e0       	ldi	r17, 0x05	; 5
 124:	e1 16       	cp	r14, r17
 126:	f1 04       	cpc	r15, r1
 128:	21 f0       	breq	.+8      	; 0x132 <main+0xb6>
 12a:	13 e0       	ldi	r17, 0x03	; 3
 12c:	e1 16       	cp	r14, r17
 12e:	f1 04       	cpc	r15, r1
 130:	71 f4       	brne	.+28     	; 0x14e <main+0xd2>
		 {
			 dataOutputReg = (reg1 - reg2 +16 )%16;
 132:	c6 01       	movw	r24, r12
 134:	82 1b       	sub	r24, r18
 136:	93 0b       	sbc	r25, r19
 138:	40 96       	adiw	r24, 0x10	; 16
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	90 78       	andi	r25, 0x80	; 128
 13e:	99 23       	and	r25, r25
 140:	24 f4       	brge	.+8      	; 0x14a <main+0xce>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	80 6f       	ori	r24, 0xF0	; 240
 146:	9f 6f       	ori	r25, 0xFF	; 255
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	fc 01       	movw	r30, r24
 14c:	47 c0       	rjmp	.+142    	; 0x1dc <main+0x160>
			 
		 }
		 else if (operation == and || operation == andi)
 14e:	28 e0       	ldi	r18, 0x08	; 8
 150:	e2 16       	cp	r14, r18
 152:	f1 04       	cpc	r15, r1
 154:	21 f0       	breq	.+8      	; 0x15e <main+0xe2>
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	e3 16       	cp	r14, r19
 15a:	f1 04       	cpc	r15, r1
 15c:	21 f4       	brne	.+8      	; 0x166 <main+0xea>
		 {
			 dataOutputReg = reg1 & reg2;
 15e:	98 23       	and	r25, r24
 160:	e9 2f       	mov	r30, r25
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	3b c0       	rjmp	.+118    	; 0x1dc <main+0x160>
		 }
		 else if (operation == or || operation == ori)
 166:	e1 14       	cp	r14, r1
 168:	f1 04       	cpc	r15, r1
 16a:	21 f0       	breq	.+8      	; 0x174 <main+0xf8>
 16c:	1d e0       	ldi	r17, 0x0D	; 13
 16e:	e1 16       	cp	r14, r17
 170:	f1 04       	cpc	r15, r1
 172:	21 f4       	brne	.+8      	; 0x17c <main+0x100>
		 {
			 dataOutputReg = reg1 | reg2;
 174:	98 2b       	or	r25, r24
 176:	e9 2f       	mov	r30, r25
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	30 c0       	rjmp	.+96     	; 0x1dc <main+0x160>
		 }
		 else if (operation == nor)
 17c:	2c e0       	ldi	r18, 0x0C	; 12
 17e:	e2 16       	cp	r14, r18
 180:	f1 04       	cpc	r15, r1
 182:	31 f4       	brne	.+12     	; 0x190 <main+0x114>
		 {
			 dataOutputReg = reg1 | reg2;
			 dataOutputReg = (dataOutputReg ^ 15);
 184:	98 2b       	or	r25, r24
 186:	89 2f       	mov	r24, r25
 188:	8a 25       	eor	r24, r10
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	26 c0       	rjmp	.+76     	; 0x1dc <main+0x160>
		 }
		 else if (operation == sll)
 190:	37 e0       	ldi	r19, 0x07	; 7
 192:	e3 16       	cp	r14, r19
 194:	f1 04       	cpc	r15, r1
 196:	89 f4       	brne	.+34     	; 0x1ba <main+0x13e>
		 {
			 dataOutputReg = reg1 << reg2;
 198:	96 01       	movw	r18, r12
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <main+0x124>
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <main+0x120>
 1a4:	c9 01       	movw	r24, r18
			 dataOutputReg%=16;
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	90 78       	andi	r25, 0x80	; 128
 1aa:	99 23       	and	r25, r25
 1ac:	24 f4       	brge	.+8      	; 0x1b6 <main+0x13a>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	80 6f       	ori	r24, 0xF0	; 240
 1b2:	9f 6f       	ori	r25, 0xFF	; 255
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	fc 01       	movw	r30, r24
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <main+0x160>
		 }
		 else if (operation == srl)
 1ba:	3a e0       	ldi	r19, 0x0A	; 10
 1bc:	e3 16       	cp	r14, r19
 1be:	f1 04       	cpc	r15, r1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <main+0x154>
		 {
			 dataOutputReg = reg1 >> reg2;
 1c2:	f6 01       	movw	r30, r12
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <main+0x14e>
 1c6:	f5 95       	asr	r31
 1c8:	e7 95       	ror	r30
 1ca:	9a 95       	dec	r25
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <main+0x14a>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <main+0x160>
		 }
		 else if (operation == j)
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	e8 16       	cp	r14, r24
 1d4:	f1 04       	cpc	r15, r1
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0x160>
		 {
			 dataOutputReg = 0;
 1d8:	ed 2f       	mov	r30, r29
 1da:	fc 2f       	mov	r31, r28
		 }

		 if (dataOutputReg%16 == 0)
 1dc:	7f 01       	movw	r14, r30
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	e9 22       	and	r14, r25
 1e2:	ff 24       	eor	r15, r15
		 }
		 
		 bsel = (zeroFlag&beqf)|((!zeroFlag)&bneqf);
		 
		 /*PORTC = 0x00;*/
		 unsigned char f = dataOutputReg | (bsel<<4);
 1e4:	8b 2f       	mov	r24, r27
 1e6:	9a 2f       	mov	r25, r26
 1e8:	e1 14       	cp	r14, r1
 1ea:	f1 04       	cpc	r15, r1
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <main+0x176>
 1ee:	8d 2f       	mov	r24, r29
 1f0:	9c 2f       	mov	r25, r28
 1f2:	9c 01       	movw	r18, r24
 1f4:	24 23       	and	r18, r20
 1f6:	35 23       	and	r19, r21
 1f8:	8b 2f       	mov	r24, r27
 1fa:	9a 2f       	mov	r25, r26
 1fc:	ef 28       	or	r14, r15
 1fe:	11 f4       	brne	.+4      	; 0x204 <main+0x188>
 200:	8d 2f       	mov	r24, r29
 202:	9c 2f       	mov	r25, r28
 204:	86 23       	and	r24, r22
 206:	97 23       	and	r25, r23
 208:	82 2b       	or	r24, r18
 20a:	93 2b       	or	r25, r19
 20c:	82 95       	swap	r24
 20e:	92 95       	swap	r25
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	98 27       	eor	r25, r24
 218:	8e 2b       	or	r24, r30
		 PORTA = f;
 21a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	83 ec       	ldi	r24, 0xC3	; 195
 21e:	99 e0       	ldi	r25, 0x09	; 9
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x1a4>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x1aa>
 226:	00 00       	nop
 228:	44 cf       	rjmp	.-376    	; 0xb2 <main+0x36>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
