
Instruction Memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000675  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ab  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000267  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};


int main(void)
{
	DDRA=0XFF; //output
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00; //input
  86:	17 ba       	out	0x17, r1	; 23
	DDRC=0xFF; //output
  88:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; //output
  8a:	81 bb       	out	0x11, r24	; 17
	
	MCUCSR|=(1<<JTD);
  8c:	84 b7       	in	r24, 0x34	; 52
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  92:	84 b7       	in	r24, 0x34	; 52
  94:	80 68       	ori	r24, 0x80	; 128
  96:	84 bf       	out	0x34, r24	; 52
	unsigned int src_reg_2;
	unsigned int src_reg_1;
	unsigned int opcode;
	
	int pc = 0;
	PORTA = 0;
  98:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0;
  9a:	15 ba       	out	0x15, r1	; 21
	
	/* Replace with your application code */
	while (1) {
		pc = PINB;
  9c:	e6 b3       	in	r30, 0x16	; 22
		cur_instruction = instructions[pc];
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	e0 5a       	subi	r30, 0xA0	; 160
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	20 81       	ld	r18, Z
  aa:	31 81       	ldd	r19, Z+1	; 0x01
		dst = 0x000F & cur_instruction;
		src_reg_2 = 0x00F0 & cur_instruction;
  ac:	c9 01       	movw	r24, r18
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	99 27       	eor	r25, r25
		src_reg_1 = (0x0F00 & cur_instruction);
  b2:	a9 01       	movw	r20, r18
  b4:	44 27       	eor	r20, r20
  b6:	5f 70       	andi	r21, 0x0F	; 15
		opcode = (0xF000 & cur_instruction);
		PORTA = src_reg_2 | dst; //src2|dst
  b8:	b9 01       	movw	r22, r18
  ba:	6f 70       	andi	r22, 0x0F	; 15
  bc:	77 27       	eor	r23, r23
  be:	68 2b       	or	r22, r24
  c0:	6b bb       	out	0x1b, r22	; 27
		PORTC = (src_reg_1 >> 8) | (opcode >> 8); // opcode|src1
  c2:	22 27       	eor	r18, r18
  c4:	30 7f       	andi	r19, 0xF0	; 240
  c6:	25 2f       	mov	r18, r21
  c8:	23 2b       	or	r18, r19
  ca:	25 bb       	out	0x15, r18	; 21
		PORTD = (src_reg_1 >> 4) | (src_reg_2 >> 4); // src1 | src2
  cc:	52 95       	swap	r21
  ce:	42 95       	swap	r20
  d0:	4f 70       	andi	r20, 0x0F	; 15
  d2:	45 27       	eor	r20, r21
  d4:	5f 70       	andi	r21, 0x0F	; 15
  d6:	45 27       	eor	r20, r21
  d8:	92 95       	swap	r25
  da:	82 95       	swap	r24
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	89 27       	eor	r24, r25
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	89 27       	eor	r24, r25
  e4:	84 2b       	or	r24, r20
  e6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ec       	ldi	r24, 0xC3	; 195
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x6a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x70>
  f2:	00 00       	nop
  f4:	d3 cf       	rjmp	.-90     	; 0x9c <main+0x1a>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
