
PC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000657  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
  DDRA = 0xFF; //for pc output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0x00; // jump address
  70:	17 ba       	out	0x17, r1	; 23
  DDRD = 0x00; // clock(7th bit) bselect(5th bit) isjump(4th bit) dst(0-3bit)
  72:	11 ba       	out	0x11, r1	; 17
  PORTB = 0x00;
  74:	18 ba       	out	0x18, r1	; 24
  PORTD = 0x00;
  76:	12 ba       	out	0x12, r1	; 18
  PORTA = 0x00;
  78:	1b ba       	out	0x1b, r1	; 27
  unsigned int pc = 0;
  unsigned int curr_clock = 0;
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
  DDRB = 0x00; // jump address
  DDRD = 0x00; // clock(7th bit) bselect(5th bit) isjump(4th bit) dst(0-3bit)
  PORTB = 0x00;
  PORTD = 0x00;
  PORTA = 0x00;
  unsigned int pc = 0;
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	f0 e0       	ldi	r31, 0x00	; 0
  unsigned int dst =0;
  unsigned int jump_address = 0;
  
    while (1) 
    {
    jump_address = PINB;
  82:	76 b3       	in	r23, 0x16	; 22
    prev_clock = curr_clock;
    curr_clock= (PIND & clock_mask) >> 7;
  84:	80 b3       	in	r24, 0x10	; 16
  86:	88 1f       	adc	r24, r24
  88:	88 27       	eor	r24, r24
  8a:	88 1f       	adc	r24, r24
  8c:	90 e0       	ldi	r25, 0x00	; 0
    bselect = (PIND & bselect_mask) >> 5;
  8e:	60 b3       	in	r22, 0x10	; 16
    isjump = (PIND & isjump_mask) >>4 ;
  90:	50 b3       	in	r21, 0x10	; 16
    dst = (PIND & dst_mask);
  92:	40 b3       	in	r20, 0x10	; 16
    if(prev_clock == 1 && curr_clock == 0)
  94:	21 30       	cpi	r18, 0x01	; 1
  96:	31 05       	cpc	r19, r1
  98:	99 f4       	brne	.+38     	; 0xc0 <main+0x54>
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	89 f4       	brne	.+34     	; 0xc0 <main+0x54>
    {
      if(isjump)
  9e:	54 ff       	sbrs	r21, 4
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <main+0x3c>
  unsigned int dst =0;
  unsigned int jump_address = 0;
  
    while (1) 
    {
    jump_address = PINB;
  a2:	e7 2f       	mov	r30, r23
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <main+0x52>
    {
      if(isjump)
      {
        pc = jump_address;
      }
      else if(bselect)
  a8:	65 ff       	sbrs	r22, 5
  aa:	08 c0       	rjmp	.+16     	; 0xbc <main+0x50>
      {
        pc =pc + 1 + dst;
  ac:	4f 70       	andi	r20, 0x0F	; 15
  ae:	24 2f       	mov	r18, r20
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	e2 0f       	add	r30, r18
  b8:	f3 1f       	adc	r31, r19
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x52>
      }
      else{
        pc = pc + 1;
  bc:	31 96       	adiw	r30, 0x01	; 1
      }
      PORTA = pc;
  be:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	a3 ec       	ldi	r26, 0xC3	; 195
  c2:	b9 e0       	ldi	r27, 0x09	; 9
  c4:	11 97       	sbiw	r26, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x58>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
  
    while (1) 
    {
    jump_address = PINB;
    prev_clock = curr_clock;
    curr_clock= (PIND & clock_mask) >> 7;
  cc:	9c 01       	movw	r18, r24
  ce:	d9 cf       	rjmp	.-78     	; 0x82 <main+0x16>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
